"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const session_1 = require("./session");
const events_1 = require("events");
var session_2 = require("./session");
exports.StatusCode = session_2.StatusCode;
class UniversalWebSocket extends events_1.EventEmitter {
    constructor(host, connectionOptions, ...parameters) {
        super();
        this.state = session_1.State.closed;
        this.session = new session_1.Session(host, connectionOptions, ...parameters);
        this.heartbeatMode = this.session.heartbeatMode;
        this.heartbeatInterval = this.session.heatbeatInterval;
        this.responseTimeout = this.session.responseTimeout;
        this.session.on('connected', () => {
            this.emit('connected');
        });
        this.session.on('disconnected', (code, reason) => {
            this.emit('disconnected', code, reason);
        });
        this.session.on('message', (message, data) => {
            this.emit(message, data);
        });
        this.session.on('request', (message, data, callback) => {
            this.emit(message, data, callback);
        });
        this.session.on('state', (state) => {
            this.state = state;
            this.emit('state', this.state);
        });
        this.session.on('error', (error) => {
            this.emit('error', error);
        });
    }
    negotiate(settings) {
        return this.session.negotiate(settings);
    }
    send(message, data) {
        this.session.send(message, data);
    }
    sendWithAck(message, data) {
        return this.session.sendWithAck(message, data);
    }
    request(message, data) {
        return this.session.request(message, data);
    }
    close(code = session_1.StatusCode.Normal_Closure, reason) {
        return this.session.close(code, reason);
    }
    open() {
        return this.session.open();
    }
}
exports.UniversalWebSocket = UniversalWebSocket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FjY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF5RjtBQUN6RixtQ0FBc0M7QUFFdEMscUNBQTBEO0FBQWpELCtCQUFBLFVBQVUsQ0FBQTtBQUNuQixNQUFhLGtCQUFtQixTQUFRLHFCQUFZO0lBT2hELFlBQVksSUFBWSxFQUFFLGlCQUFxQyxFQUFFLEdBQUcsVUFBb0I7UUFDcEYsS0FBSyxFQUFFLENBQUM7UUFOTCxVQUFLLEdBQVUsZUFBSyxDQUFDLE1BQU0sQ0FBQztRQU8vQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ2hELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7UUFFcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtZQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBMEIsRUFBRSxNQUFlLEVBQUUsRUFBRTtZQUM1RSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFlLEVBQUUsSUFBUyxFQUFFLEVBQUU7WUFDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFlLEVBQUUsSUFBUyxFQUFFLFFBQXFELEVBQUUsRUFBRTtZQUM3RyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxTQUFTLENBQUMsUUFBdUU7UUFDcEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQWUsRUFBRSxJQUFVO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQWUsRUFBRSxJQUFVO1FBQzFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxPQUFPLENBQUksT0FBZSxFQUFFLElBQVU7UUFDekMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBSSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFtQixvQkFBVSxDQUFDLGNBQWMsRUFBRyxNQUFlO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxJQUFJO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7Q0FDSjtBQTFERCxnREEwREMifQ==