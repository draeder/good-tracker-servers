/// <reference types="node" />
import { StatusCode, ConnectionOptions, State, HeartbeatMode } from './session';
import { EventEmitter } from 'events';
export { StatusCode, ConnectionOptions } from './session';
export declare class UniversalWebSocket extends EventEmitter {
    private session;
    state: State;
    readonly heartbeatMode: HeartbeatMode;
    readonly heartbeatInterval: number;
    responseTimeout: number;
    constructor(host: string, connectionOptions?: ConnectionOptions, ...parameters: string[]);
    negotiate(settings: {
        heartbeatMode?: HeartbeatMode;
        heartbeatInterval?: number;
    }): Promise<{
        approve: boolean;
        supportedOptions?: import("./session").SupportedOptions | undefined;
    }>;
    send(message: string, data?: any): void;
    sendWithAck(message: string, data?: any): Promise<{}>;
    request<T>(message: string, data?: any): Promise<T>;
    close(code?: StatusCode, reason?: string): void;
    open(): Error | undefined;
}
//# sourceMappingURL=access.d.ts.map