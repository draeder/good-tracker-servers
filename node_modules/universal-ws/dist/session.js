"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const retry = require("retry");
const transport_1 = require("./transport");
var transport_2 = require("./transport");
exports.StatusCode = transport_2.StatusCode;
var ReservedPacketTypes;
(function (ReservedPacketTypes) {
    ReservedPacketTypes["Heartbeat"] = "hb";
    ReservedPacketTypes["HeartbeatRequest"] = "hbr";
    ReservedPacketTypes["NegotiateSettings"] = "ns";
})(ReservedPacketTypes || (ReservedPacketTypes = {}));
var PacketType;
(function (PacketType) {
    PacketType[PacketType["Heartbeat"] = 0] = "Heartbeat";
    PacketType[PacketType["Message"] = 1] = "Message";
    PacketType[PacketType["Request"] = 2] = "Request";
    PacketType[PacketType["Response"] = 3] = "Response";
    PacketType[PacketType["Acknowledgement"] = 4] = "Acknowledgement";
    PacketType[PacketType["NegotiateSettings"] = 5] = "NegotiateSettings";
})(PacketType || (PacketType = {}));
var HeartbeatMode;
(function (HeartbeatMode) {
    HeartbeatMode["upstream"] = "upstream";
    HeartbeatMode["downstream"] = "downstream";
    HeartbeatMode["roundtrip"] = "roundtrip";
    HeartbeatMode["disabled"] = "disabled";
})(HeartbeatMode = exports.HeartbeatMode || (exports.HeartbeatMode = {}));
var State;
(function (State) {
    State[State["connecting"] = 0] = "connecting";
    State[State["open"] = 1] = "open";
    State[State["closing"] = 2] = "closing";
    State[State["closed"] = 3] = "closed";
})(State = exports.State || (exports.State = {}));
class Session extends events_1.EventEmitter {
    constructor(host, options, ...parameters) {
        super();
        this.host = host;
        this.waiting = [];
        this.rpcTransactions = {};
        this.connectionTimeout = 60;
        this.responseTimeout = 15;
        this.heartbeatModeTimeoutMultiplier = 2.5;
        this.autoConnect = true;
        this.retryConnectionStatusCodes = [];
        this.heatbeatInterval = 1;
        this.heartbeatMode = HeartbeatMode.roundtrip;
        this.state = State.closed;
        this.messageIdSeed = 0; // rotating id for messages
        if (!options)
            options = {}; // Fill if empty
        if (options.connectionTimeout)
            this.connectionTimeout = options.connectionTimeout;
        if (options.responseTimeout)
            this.responseTimeout = options.responseTimeout;
        if (options.heatbeatInterval)
            this.heatbeatInterval = options.heatbeatInterval;
        if (options.heartbeatMode)
            this.heartbeatMode = options.heartbeatMode;
        if (options.heartbeatModeTimeoutMultiplier)
            this.heartbeatModeTimeoutMultiplier = options.heartbeatModeTimeoutMultiplier;
        if (options.autoConnect)
            this.autoConnect = options.autoConnect;
        if (options.perMessageDeflateOptions)
            this.perMessageDeflateOptions = options.perMessageDeflateOptions;
        if (options.retryConnectionStatusCodes)
            this.retryConnectionStatusCodes = options.retryConnectionStatusCodes;
        this.retryOptions = options.retryOptions ? options.retryOptions : {
            factor: 1.5,
            minTimeout: .5 * 1000,
            maxTimeout: 60 * 1000,
            randomize: true,
            forever: true
        };
        if (parameters && parameters.length)
            this.parameters = parameters;
        if (this.autoConnect) {
            this.resetAndAttemptConnectOperation();
        }
    }
    changeState(state) {
        this.state = state;
        this.emit('state', state);
    }
    resetAndAttemptConnectOperation() {
        if (this.connectOperation) {
            this.connectOperation.stop();
            this.connectOperation.reset();
        }
        this.connectOperation = retry.operation(this.retryOptions);
        this.connectOperation.attempt((currentAttempt) => {
            this.connect();
        }, {
            timeout: this.connectionTimeout * 1000, cb: () => {
                if (this.connectOperation)
                    this.connectOperation.retry(new Error('Connection timed out.'));
            }
        });
    }
    connect() {
        this.transport = new transport_1.UniversalWs(this.host, { parameters: this.parameters, perMessageDeflateOptions: this.perMessageDeflateOptions });
        this.transport.on('message', (data) => {
            this.handleMessage(data);
        });
        this.transport.on('close', (data) => {
            const closeError = this.resolveErrorFromCloseEvent(data);
            if (this.connectOperation) {
                if (closeError)
                    this.connectOperation.retry(closeError);
                else
                    this.connectOperation.stop();
            }
            else {
                if (closeError)
                    this.resetAndAttemptConnectOperation();
                else { } // Do nothing
            }
            this.handleClose(data);
        });
        this.transport.on('error', (data) => {
            this.handleError(data);
        });
        this.transport.on('open', (data) => {
            delete this.connectOperation;
            this.connectionReady();
        });
    }
    connectionReady() {
        this.changeState(State.open);
        this.emit('connected'); // Connected and ready
        if (this.waiting) {
            this.waiting.forEach((callback) => {
                process.nextTick(callback);
            });
            delete this.waiting;
        }
        this.startHeartbeat();
    }
    startHeartbeat() {
        if (this.heartbeatMode === HeartbeatMode.disabled || this.heartbeatMode === HeartbeatMode.downstream)
            return;
        // Clear previous heartbeatPolling if restarting
        if (this.heartbeatPolling)
            clearInterval(this.heartbeatPolling);
        this.heartbeatPolling = setInterval(() => {
            this.heartbeatMode === HeartbeatMode.upstream ? this.sendHeartbeat() : this.requestHeartbeat();
        }, this.heatbeatInterval * 1000);
        this.resetTimeout();
    }
    stopHeartbeat() {
        if (this.expires)
            clearTimeout(this.expires);
        if (this.heartbeatPolling)
            clearInterval(this.heartbeatPolling);
    }
    awaitReady(callback) {
        if (this.state === State.open) {
            process.nextTick(callback);
        }
        else {
            this.waiting = this.waiting || [];
            this.waiting.push(callback);
        }
    }
    resetTimeout() {
        if (this.expires) {
            // Node 10.2.0: this.expires.refresh();
            clearTimeout(this.expires);
            this.expires = setTimeout(() => {
                this.onConnectionInactive();
            }, this.heatbeatInterval * (typeof this.heartbeatModeTimeoutMultiplier === 'number' ? this.heartbeatModeTimeoutMultiplier : this.heartbeatModeTimeoutMultiplier()) * 1000);
        }
        else {
            this.expires = setTimeout(() => {
                this.onConnectionInactive();
            }, this.heatbeatInterval * (typeof this.heartbeatModeTimeoutMultiplier === 'number' ? this.heartbeatModeTimeoutMultiplier : this.heartbeatModeTimeoutMultiplier()) * 1000);
        }
    }
    getPacketType(packet) {
        if (packet.r) { // Handle request/response control
            if (typeof packet.r === 'string') { // Random string indicates a request from the server
                return PacketType.Request;
            }
            else if (typeof packet.r === 'number') { // Incrementing number indicates a response from the server
                return PacketType.Response;
            }
            else {
                return; // Invalid packet
            }
        }
        else if (packet.t) { // Handle Heartbeat & Acknowledgement
            switch (packet.t) {
                case ReservedPacketTypes.Heartbeat: // Server responds to client's heartbeat request
                    return PacketType.Heartbeat;
                case ReservedPacketTypes.NegotiateSettings: // Server responds to client's negotiate settings
                    return PacketType.NegotiateSettings;
                default: // Server acknowledges a response from the client
                    return PacketType.Acknowledgement;
            }
        }
        else { // Handle simple messages from the client
            return PacketType.Message; // Simple message from the client
        }
    }
    handleClose(data) {
        this.transport = undefined;
        // Callback all existing rpc's with an error
        Object.keys(this.rpcTransactions).forEach((transactionId) => {
            this.rpcTransactions[transactionId].callback(undefined, 'Connection closed');
        });
        this.onConnectionInactive({ code: data.code, reason: data.reason });
    }
    // Returns an error and the client will retry to connect
    resolveErrorFromCloseEvent(data) {
        switch (data.code) {
            case transport_1.StatusCode.Normal_Closure:
            case transport_1.StatusCode.Going_Away:
            case transport_1.StatusCode.Protocol_Error:
            case transport_1.StatusCode.No_Status_Code_Present:
                return;
            case transport_1.StatusCode.Invalid_Data:
                // Retry on 1006
                return new Error('Connection was closed abnormally. Possibly server unreachable');
            case transport_1.StatusCode.Message_Error:
            case transport_1.StatusCode.Unexpected_Error:
                // Do not reconnect, unknown server error
                return;
            case undefined:
                // Code not recieved
                this.handleError(new Error(`No status code recieved on server close: ${data.code}`));
                return;
            default:
                if (this.retryConnectionStatusCodes.includes(data.code))
                    return new Error(`Retrying connection on custom status code: ${data.code}`);
                this.handleError(new Error(`Unknown status code recieved on server close: ${data.code}`));
                return;
        }
    }
    handleError(data) {
        this.emit('error', data);
    }
    handleMessage(message) {
        this.onConnectionActive();
        if (!message)
            return;
        this.awaitReady(() => {
            let packet;
            // parse packet JSON
            try {
                packet = JSON.parse(message);
            }
            catch (error) {
                // throw?
                throw new Error('Invalid packet');
            }
            switch (this.getPacketType(packet)) {
                case PacketType.Heartbeat: // Heartbeat handled by onConnectionActive
                    break;
                case PacketType.NegotiateSettings:
                    this.onNegotiateSettings(packet);
                    break;
                case PacketType.Message: // Message from the server
                    this.onMessage(packet);
                    break;
                case PacketType.Request: // Request from the server expecting a response from client
                    this.onRequest(packet);
                    break;
                case PacketType.Response: // Response from the server for a previous request
                    this.onResponse(packet);
                    break;
                case PacketType.Acknowledgement: // Acknowledgement from server of a response from client
                    this.onAcknowledgement(packet);
                    break;
                default:
                    throw new Error('Invalid packet');
            }
        });
    }
    // Called whenever connection is active
    onConnectionActive() {
        if (this.state === State.open) {
            this.resetTimeout();
        }
    }
    // Called when the connection is considered inactive
    onConnectionInactive(data) {
        this.changeState(State.closing);
        this.stopHeartbeat();
        if (data) {
            this.emit('disconnected', data.code, data.reason);
        }
        else {
            this.emit('disconnected');
        }
    }
    onNegotiateSettings(packet) {
        // Handle negotiate expecting approval response
        if (this.rpcTransactions[packet.d.id]) {
            if (packet.t) { // Client expects acknowledgement of response
                if (this.transport)
                    this.transport.send(JSON.stringify({ t: packet.t }));
            }
            this.rpcTransactions[packet.d.id].callback(packet.d);
        }
    }
    onMessage(packet) {
        this.emit('message', `#${packet.m}`, packet.d);
    }
    onRequest(packet) {
        // Handle request expecting a response
        const callback = (data, ack) => {
            const response = {
                m: JSON.stringify(packet.m),
                d: data,
                r: JSON.stringify(packet.i)
            };
            if (ack) {
                return new Promise((resolve, reject) => {
                    const acknowledgementId = this.getNextMessageId().toString();
                    response.t = acknowledgementId;
                    this.rpcTransactions[acknowledgementId] = {
                        callback: (response, error) => {
                            // Clear and delete rpc
                            clearTimeout(this.rpcTransactions[acknowledgementId].timer);
                            delete this.rpcTransactions[acknowledgementId];
                            error ? reject(error) : resolve();
                        },
                        timer: setTimeout(() => {
                            // Timed out in acknowledging response
                            this.rpcTransactions[acknowledgementId].callback(undefined, 'Acknowledgement timed out');
                        }, this.responseTimeout * 1000)
                    };
                    if (this.transport)
                        this.transport.send(JSON.stringify(response));
                });
            }
            else {
                if (this.transport)
                    this.transport.send(JSON.stringify(response));
                return;
            }
        };
        this.emit('request', `@${packet.m}`, packet.d, callback);
    }
    onResponse(packet) {
        if (typeof packet.r !== 'number')
            return;
        if (this.rpcTransactions[packet.r]) {
            if (packet.t) { // Client expects acknowledgement of response
                if (this.transport)
                    this.transport.send(JSON.stringify({ t: packet.t }));
            }
            this.rpcTransactions[packet.r].callback(packet.d);
        }
    }
    onAcknowledgement(packet) {
        if (typeof packet.t !== 'string')
            return;
        if (this.rpcTransactions[packet.t]) {
            this.rpcTransactions[packet.t].callback(undefined);
        }
    }
    sendHeartbeat() {
        if (this.transport)
            this.transport.send(JSON.stringify({ t: ReservedPacketTypes.Heartbeat }));
    }
    requestHeartbeat() {
        if (this.transport)
            this.transport.send(JSON.stringify({ t: ReservedPacketTypes.HeartbeatRequest }));
    }
    getNextMessageId() {
        if (this.messageIdSeed === Number.MAX_SAFE_INTEGER)
            this.messageIdSeed = 0; // Reset to 0
        return ++this.messageIdSeed;
    }
    negotiate(settings) {
        return new Promise((resolve, reject) => {
            const packet = {
                t: ReservedPacketTypes.NegotiateSettings,
                d: settings
            };
            this.awaitReady(() => {
                const negotiationId = this.getNextMessageId().toString();
                this.rpcTransactions[negotiationId] = {
                    callback: (response, error) => {
                        // Clear and delete rpc
                        clearTimeout(this.rpcTransactions[negotiationId].timer);
                        delete this.rpcTransactions[negotiationId];
                        error ? reject(error) : resolve({ approve: response.approve, supportedOptions: response.supportedOptions });
                    },
                    timer: setTimeout(() => {
                        this.rpcTransactions[negotiationId].callback(undefined, new Error('Negotiation timed out.'));
                    }, this.responseTimeout * 1000)
                };
                if (this.transport)
                    this.transport.send(JSON.stringify(packet));
            });
        });
    }
    send(message, data) {
        const packet = {
            m: message
        };
        if (data) {
            packet.d = data;
        }
        this.awaitReady(() => {
            if (this.transport)
                this.transport.send(JSON.stringify(packet));
        });
    }
    sendWithAck(message, data) {
        return new Promise((resolve, reject) => {
            const packet = {
                m: message
            };
            if (data) {
                packet.d = data;
            }
            this.awaitReady(() => {
                const acknowledgementId = this.getNextMessageId().toString();
                packet.i = acknowledgementId;
                this.rpcTransactions[acknowledgementId] = {
                    callback: (response, error) => {
                        // Clear and delete rpc
                        clearTimeout(this.rpcTransactions[acknowledgementId].timer);
                        delete this.rpcTransactions[acknowledgementId];
                        error ? reject(error) : resolve();
                    },
                    timer: setTimeout(() => {
                        this.rpcTransactions[acknowledgementId].callback(undefined, new Error('Acknowledgement timed out.'));
                    }, this.responseTimeout * 1000)
                };
                if (this.transport)
                    this.transport.send(JSON.stringify(packet));
            });
        });
    }
    request(message, data = {}) {
        return new Promise((resolve, reject) => {
            const requestId = this.getNextMessageId();
            const packet = {
                m: message,
                d: data,
                r: requestId
            };
            this.awaitReady(() => {
                if (this.transport) {
                    this.transport.send(JSON.stringify(packet));
                    this.rpcTransactions[requestId] = {
                        callback: (response, error) => {
                            // Clear and delete rpc
                            clearTimeout(this.rpcTransactions[requestId].timer);
                            delete this.rpcTransactions[requestId];
                            error ? reject(error) : resolve(response);
                        },
                        timer: setTimeout(() => {
                            // Timed out in acknowledging response
                            this.rpcTransactions[requestId].callback(undefined, new Error('Response timed out.'));
                        }, this.responseTimeout * 1000)
                    };
                }
            });
        });
    }
    close(code, reason) {
        this.changeState(State.closing);
        delete this.connectOperation;
        if (this.transport)
            this.transport.close(code, reason);
        // Clean up events
        this.changeState(State.closed);
        this.stopHeartbeat();
        Object.keys(this.rpcTransactions).forEach((transactionId) => {
            this.rpcTransactions[transactionId].callback(undefined, 'Connection closed');
        });
    }
    open() {
        if (this.state === State.closed) {
            this.connect();
            return;
        }
        else {
            return new Error(`Cannot open. Current state is: ${this.state}`);
        }
    }
}
exports.Session = Session;
//# sourceMappingURL=data:application/json;base64,