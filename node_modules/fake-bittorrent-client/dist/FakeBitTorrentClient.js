"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
var https_1 = __importDefault(require("https"));
var http_1 = __importDefault(require("http"));
var FakeBitTorrentClient = (function () {
    function FakeBitTorrentClient(tracker, hash, options) {
        this.tracker = tracker;
        this.hash = hash;
        if (options) {
            this.options = options;
            this.uploaded = options.uploaded || 0;
            this.downloaded = options.downloaded || 0;
        }
        else {
            this.options = {
                peerId: '-DE13F0-' + crypto_1.default.randomBytes(6).toString('hex'),
                port: Math.floor(Math.random() * (49151 - 1024 + 1) + 1024)
            };
            this.downloaded = 0;
            this.uploaded = 0;
        }
    }
    FakeBitTorrentClient.prototype.upload = function (bytes) {
        this.uploaded += bytes;
        return this.sendHttpRequest(bytes, 0);
    };
    FakeBitTorrentClient.prototype.download = function (bytes) {
        this.downloaded += bytes;
        return this.sendHttpRequest(0, bytes);
    };
    FakeBitTorrentClient.prototype.sendHttpRequest = function (upload, download) {
        var _this = this;
        return new Promise(function (accept, reject) {
            var url = [
                _this.tracker,
                '?info_hash=',
                _this.encodeURI(_this.hash),
                '&peer_id=',
                _this.options.peerId,
                '&port=',
                _this.options.port,
                '&uploaded=',
                _this.uploaded,
                '&downloaded=',
                _this.downloaded,
                '&compact=1'
            ].join('');
            var handler = null;
            if (_this.tracker.startsWith('http://')) {
                handler = http_1.default;
            }
            else if (_this.tracker.startsWith('https://')) {
                handler = https_1.default;
            }
            else {
                throw 'Protocol not recognized';
            }
            handler.get(url, function (res) {
                var statusCode = res.statusCode;
                if (statusCode !== 200) {
                    return reject(statusCode);
                }
                else {
                    return accept();
                }
            }).on('error', function (err) {
                return reject(err);
            });
        });
    };
    FakeBitTorrentClient.prototype.encodeURI = function (hash) {
        return hash.replace(/.{2}/g, function (m) {
            var v = parseInt(m, 16);
            if (v <= 127) {
                m = encodeURIComponent(String.fromCharCode(v));
                if (m[0] === '%') {
                    m = m.toLowerCase();
                }
            }
            else {
                m = '%' + m;
            }
            return m;
        });
    };
    return FakeBitTorrentClient;
}());
exports.default = FakeBitTorrentClient;
